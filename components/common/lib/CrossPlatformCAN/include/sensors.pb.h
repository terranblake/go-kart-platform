/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_KART_SENSORS_SENSORS_PB_H_INCLUDED
#define PB_KART_SENSORS_SENSORS_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Sensor command IDs (sensor types)
 These are used as command_id in the protocol */
typedef enum _kart_sensors_SensorCommandId {
    kart_sensors_SensorCommandId_TEMPERATURE = 0, /* Temperature sensors */
    kart_sensors_SensorCommandId_RPM = 1, /* RPM sensors */
    kart_sensors_SensorCommandId_VOLTAGE = 2, /* Voltage sensors */
    kart_sensors_SensorCommandId_CURRENT = 3, /* Current sensors */
    kart_sensors_SensorCommandId_PRESSURE = 4, /* Pressure sensors */
    kart_sensors_SensorCommandId_POSITION = 5, /* Position sensors */
    kart_sensors_SensorCommandId_ACCELERATION = 6, /* Accelerometer */
    kart_sensors_SensorCommandId_GYROSCOPE = 7 /* Gyroscope */
} kart_sensors_SensorCommandId;

/* Sensor status values
 Used in value field when command_id is STATUS */
typedef enum _kart_sensors_SensorStatusValue {
    kart_sensors_SensorStatusValue_OK = 0, /* Normal operation */
    kart_sensors_SensorStatusValue_ERROR_CONNECTION = 1, /* Connection error */
    kart_sensors_SensorStatusValue_ERROR_TIMEOUT = 2, /* Timeout error */
    kart_sensors_SensorStatusValue_ERROR_RANGE = 3, /* Out of range error */
    kart_sensors_SensorStatusValue_ERROR_CALIBRATION = 4, /* Calibration error */
    kart_sensors_SensorStatusValue_DISABLED = 5, /* Sensor is disabled */
    kart_sensors_SensorStatusValue_INITIALIZING = 6, /* Sensor is initializing */
    kart_sensors_SensorStatusValue_ERROR_GENERAL = 7 /* General error */
} kart_sensors_SensorStatusValue;

#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _kart_sensors_SensorCommandId_MIN kart_sensors_SensorCommandId_TEMPERATURE
#define _kart_sensors_SensorCommandId_MAX kart_sensors_SensorCommandId_GYROSCOPE
#define _kart_sensors_SensorCommandId_ARRAYSIZE ((kart_sensors_SensorCommandId)(kart_sensors_SensorCommandId_GYROSCOPE+1))

#define _kart_sensors_SensorStatusValue_MIN kart_sensors_SensorStatusValue_OK
#define _kart_sensors_SensorStatusValue_MAX kart_sensors_SensorStatusValue_ERROR_GENERAL
#define _kart_sensors_SensorStatusValue_ARRAYSIZE ((kart_sensors_SensorStatusValue)(kart_sensors_SensorStatusValue_ERROR_GENERAL+1))


#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
