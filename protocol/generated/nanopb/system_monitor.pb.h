/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_KART_SYSTEM_MONITOR_SYSTEM_MONITOR_PB_H_INCLUDED
#define PB_KART_SYSTEM_MONITOR_SYSTEM_MONITOR_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* System Monitor Component IDs
 Identifies the specific system component being reported on. */
typedef enum _kart_system_monitor_SystemMonitorComponentId {
    kart_system_monitor_SystemMonitorComponentId_RESERVED_ZERO = 0, /* Reserve 0 if needed */
    kart_system_monitor_SystemMonitorComponentId_RASPBERRY_PI = 1, /* Represents the main RPi system (for Task 2 health metrics) */
    kart_system_monitor_SystemMonitorComponentId_ESP32_MAIN = 2, /* Represents a primary ESP32 (for Task 2 health metrics) */
    kart_system_monitor_SystemMonitorComponentId_UPLINK_MANAGER = 3, /* Logical component representing the vehicle's telemetry uplink process */
    kart_system_monitor_SystemMonitorComponentId_TIME_MASTER = 4 /* Component ID for the central time source */
} kart_system_monitor_SystemMonitorComponentId;

/* System Monitor Command IDs
 Specifies the data type being reported. */
typedef enum _kart_system_monitor_SystemMonitorCommandId {
    /* --- Uplink Manager Status --- (Task 1) */
    kart_system_monitor_SystemMonitorCommandId_UPLINK_STATUS = 0, /* Current status of the uplink connection (enum UplinkStatusValue) */
    kart_system_monitor_SystemMonitorCommandId_UPLINK_QUEUE_SIZE = 1, /* Number of records currently buffered locally waiting for uplink (uint16 or uint24) */
    kart_system_monitor_SystemMonitorCommandId_UPLINK_AVG_LATENCY_MS = 2, /* Rolling average uplink latency (send to ack) in ms (uint16) */
    kart_system_monitor_SystemMonitorCommandId_UPLINK_AVG_THROUGHPUT_KBPS = 3, /* Rolling average uplink throughput in KB/sec (uint16) */
    /* --- Time Synchronization & RTT --- */
    kart_system_monitor_SystemMonitorCommandId_PING = 4, /* COMMAND: Sent by collector to initiate RTT measurement and provide time reference (value = collector time ms, 24-bit) */
    kart_system_monitor_SystemMonitorCommandId_PONG = 5, /* STATUS: Sent by device in response to PING, echoing the original PING value */
    kart_system_monitor_SystemMonitorCommandId_ROUNDTRIPTIME_MS = 6, /* STATUS: Reported by collector, storing the calculated RTT for a specific node (value = RTT in ms, uint16?) */
    kart_system_monitor_SystemMonitorCommandId_SET_TIME = 7 /* COMMAND: Sent by collector TO device, value is target device time (ms modulo 2^24) */
} kart_system_monitor_SystemMonitorCommandId;

/* Used with UPLINK_MANAGER and UPLINK_STATUS command */
typedef enum _kart_system_monitor_UplinkStatusValue {
    kart_system_monitor_UplinkStatusValue_DISCONNECTED = 0,
    kart_system_monitor_UplinkStatusValue_CONNECTING = 1,
    kart_system_monitor_UplinkStatusValue_CONNECTED = 2,
    kart_system_monitor_UplinkStatusValue_ERROR = 3
} kart_system_monitor_UplinkStatusValue;

#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _kart_system_monitor_SystemMonitorComponentId_MIN kart_system_monitor_SystemMonitorComponentId_RESERVED_ZERO
#define _kart_system_monitor_SystemMonitorComponentId_MAX kart_system_monitor_SystemMonitorComponentId_TIME_MASTER
#define _kart_system_monitor_SystemMonitorComponentId_ARRAYSIZE ((kart_system_monitor_SystemMonitorComponentId)(kart_system_monitor_SystemMonitorComponentId_TIME_MASTER+1))

#define _kart_system_monitor_SystemMonitorCommandId_MIN kart_system_monitor_SystemMonitorCommandId_UPLINK_STATUS
#define _kart_system_monitor_SystemMonitorCommandId_MAX kart_system_monitor_SystemMonitorCommandId_SET_TIME
#define _kart_system_monitor_SystemMonitorCommandId_ARRAYSIZE ((kart_system_monitor_SystemMonitorCommandId)(kart_system_monitor_SystemMonitorCommandId_SET_TIME+1))

#define _kart_system_monitor_UplinkStatusValue_MIN kart_system_monitor_UplinkStatusValue_DISCONNECTED
#define _kart_system_monitor_UplinkStatusValue_MAX kart_system_monitor_UplinkStatusValue_ERROR
#define _kart_system_monitor_UplinkStatusValue_ARRAYSIZE ((kart_system_monitor_UplinkStatusValue)(kart_system_monitor_UplinkStatusValue_ERROR+1))


#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
