/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_KART_MOTORS_MOTORS_PB_H_INCLUDED
#define PB_KART_MOTORS_MOTORS_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Motor component IDs */
typedef enum _kart_motors_MotorComponentId {
    kart_motors_MotorComponentId_MAIN_DRIVE = 0, /* Main drive motor */
    kart_motors_MotorComponentId_AUXILIARY = 1, /* Auxiliary motors */
    kart_motors_MotorComponentId_STEERING = 2, /* Steering motor if electric */
    kart_motors_MotorComponentId_FAN = 3, /* Cooling fan motor */
    kart_motors_MotorComponentId_PUMP = 4 /* Liquid cooling pump */
} kart_motors_MotorComponentId;

/* Motor command IDs */
typedef enum _kart_motors_MotorCommandId {
    kart_motors_MotorCommandId_SPEED = 0, /* Speed control (0-100%) */
    kart_motors_MotorCommandId_DIRECTION = 1, /* Forward/reverse */
    kart_motors_MotorCommandId_BRAKE = 2, /* Brake control */
    kart_motors_MotorCommandId_MODE = 3, /* Speed mode (low/mid/high) */
    kart_motors_MotorCommandId_CALIBRATE = 4 /* Calibration */
} kart_motors_MotorCommandId;

/* Motor direction values */
typedef enum _kart_motors_MotorDirectionValue {
    kart_motors_MotorDirectionValue_FORWARD = 0, /* Forward direction */
    kart_motors_MotorDirectionValue_REVERSE = 1, /* Reverse direction */
    kart_motors_MotorDirectionValue_NEUTRAL = 2 /* Neutral (no direction) */
} kart_motors_MotorDirectionValue;

/* Motor brake values */
typedef enum _kart_motors_MotorBrakeValue {
    kart_motors_MotorBrakeValue_BRAKE_OFF = 0, /* Brake off */
    kart_motors_MotorBrakeValue_BRAKE_LOW = 1, /* Brake low */
    kart_motors_MotorBrakeValue_BRAKE_HIGH = 2 /* Brake high */
} kart_motors_MotorBrakeValue;

/* Motor mode values */
typedef enum _kart_motors_MotorModeValue {
    kart_motors_MotorModeValue_LOW = 0, /* Low speed/power mode */
    kart_motors_MotorModeValue_MEDIUM = 1, /* Medium speed/power mode */
    kart_motors_MotorModeValue_HIGH = 2, /* High speed/power mode */
    kart_motors_MotorModeValue_ECO = 3, /* Economy mode */
    kart_motors_MotorModeValue_SPORT = 4, /* Sport mode */
    kart_motors_MotorModeValue_CUSTOM = 5, /* Custom mode */
    kart_motors_MotorModeValue_OFF = 6 /* Off mode */
} kart_motors_MotorModeValue;

/* Motor calibration values */
typedef enum _kart_motors_MotorCalibrateValue {
    kart_motors_MotorCalibrateValue_CAL_START = 0, /* Start calibration */
    kart_motors_MotorCalibrateValue_CAL_STOP = 1, /* Stop calibration */
    kart_motors_MotorCalibrateValue_CAL_RESET = 2 /* Reset to default calibration */
} kart_motors_MotorCalibrateValue;

/* Motor status values (bitfield) */
typedef enum _kart_motors_MotorStatusValue {
    kart_motors_MotorStatusValue_STATUS_OK = 0, /* No issues */
    kart_motors_MotorStatusValue_ERROR_OVERCURRENT = 1, /* Overcurrent error */
    kart_motors_MotorStatusValue_ERROR_OVERVOLTAGE = 2, /* Overvoltage error */
    kart_motors_MotorStatusValue_ERROR_UNDERVOLTAGE = 3, /* Undervoltage error */
    kart_motors_MotorStatusValue_ERROR_OVERTEMP = 4, /* Overtemperature error */
    kart_motors_MotorStatusValue_ERROR_GENERAL = 5, /* General error */
    kart_motors_MotorStatusValue_STATUS_UNKNOWN = 6 /* Unknown status */
} kart_motors_MotorStatusValue;

#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _kart_motors_MotorComponentId_MIN kart_motors_MotorComponentId_MAIN_DRIVE
#define _kart_motors_MotorComponentId_MAX kart_motors_MotorComponentId_PUMP
#define _kart_motors_MotorComponentId_ARRAYSIZE ((kart_motors_MotorComponentId)(kart_motors_MotorComponentId_PUMP+1))

#define _kart_motors_MotorCommandId_MIN kart_motors_MotorCommandId_SPEED
#define _kart_motors_MotorCommandId_MAX kart_motors_MotorCommandId_CALIBRATE
#define _kart_motors_MotorCommandId_ARRAYSIZE ((kart_motors_MotorCommandId)(kart_motors_MotorCommandId_CALIBRATE+1))

#define _kart_motors_MotorDirectionValue_MIN kart_motors_MotorDirectionValue_FORWARD
#define _kart_motors_MotorDirectionValue_MAX kart_motors_MotorDirectionValue_NEUTRAL
#define _kart_motors_MotorDirectionValue_ARRAYSIZE ((kart_motors_MotorDirectionValue)(kart_motors_MotorDirectionValue_NEUTRAL+1))

#define _kart_motors_MotorBrakeValue_MIN kart_motors_MotorBrakeValue_BRAKE_OFF
#define _kart_motors_MotorBrakeValue_MAX kart_motors_MotorBrakeValue_BRAKE_HIGH
#define _kart_motors_MotorBrakeValue_ARRAYSIZE ((kart_motors_MotorBrakeValue)(kart_motors_MotorBrakeValue_BRAKE_HIGH+1))

#define _kart_motors_MotorModeValue_MIN kart_motors_MotorModeValue_LOW
#define _kart_motors_MotorModeValue_MAX kart_motors_MotorModeValue_OFF
#define _kart_motors_MotorModeValue_ARRAYSIZE ((kart_motors_MotorModeValue)(kart_motors_MotorModeValue_OFF+1))

#define _kart_motors_MotorCalibrateValue_MIN kart_motors_MotorCalibrateValue_CAL_START
#define _kart_motors_MotorCalibrateValue_MAX kart_motors_MotorCalibrateValue_CAL_RESET
#define _kart_motors_MotorCalibrateValue_ARRAYSIZE ((kart_motors_MotorCalibrateValue)(kart_motors_MotorCalibrateValue_CAL_RESET+1))

#define _kart_motors_MotorStatusValue_MIN kart_motors_MotorStatusValue_STATUS_OK
#define _kart_motors_MotorStatusValue_MAX kart_motors_MotorStatusValue_STATUS_UNKNOWN
#define _kart_motors_MotorStatusValue_ARRAYSIZE ((kart_motors_MotorStatusValue)(kart_motors_MotorStatusValue_STATUS_UNKNOWN+1))


#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
