/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_KART_CONTROLS_CONTROLS_PB_H_INCLUDED
#define PB_KART_CONTROLS_CONTROLS_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Control component IDs */
typedef enum _kart_controls_ControlComponentId {
    kart_controls_ControlComponentId_SUSPENSION = 0,
    kart_controls_ControlComponentId_COOLING = 1,
    kart_controls_ControlComponentId_USER_INTERFACE = 2,
    kart_controls_ControlComponentId_SECURITY = 3,
    kart_controls_ControlComponentId_DIAGNOSTIC = 4,
    kart_controls_ControlComponentId_AUTONOMOUS = 5
} kart_controls_ControlComponentId;

/* Control command IDs */
typedef enum _kart_controls_ControlCommandId {
    kart_controls_ControlCommandId_MODE = 0,
    kart_controls_ControlCommandId_LIMIT = 1,
    kart_controls_ControlCommandId_CALIBRATE = 2,
    kart_controls_ControlCommandId_EMERGENCY = 3
} kart_controls_ControlCommandId;

/* Control mode values */
typedef enum _kart_controls_ControlModeValue {
    kart_controls_ControlModeValue_MANUAL = 0,
    kart_controls_ControlModeValue_ASSISTED = 1,
    kart_controls_ControlModeValue_AUTOMATIC = 2,
    kart_controls_ControlModeValue_SPORT = 3,
    kart_controls_ControlModeValue_ECO = 4,
    kart_controls_ControlModeValue_SAFETY = 5,
    kart_controls_ControlModeValue_TEST = 6 /* Test mode for testing */
} kart_controls_ControlModeValue;

/* Control calibrate values */
typedef enum _kart_controls_ControlCalibrateValue {
    kart_controls_ControlCalibrateValue_CAL_START = 0,
    kart_controls_ControlCalibrateValue_CAL_STOP = 1,
    kart_controls_ControlCalibrateValue_CAL_RESET = 2
} kart_controls_ControlCalibrateValue;

/* Control emergency values */
typedef enum _kart_controls_ControlEmergencyValue {
    kart_controls_ControlEmergencyValue_NORMAL = 0,
    kart_controls_ControlEmergencyValue_STOP = 1,
    kart_controls_ControlEmergencyValue_LIMP_HOME = 2
} kart_controls_ControlEmergencyValue;

#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _kart_controls_ControlComponentId_MIN kart_controls_ControlComponentId_SUSPENSION
#define _kart_controls_ControlComponentId_MAX kart_controls_ControlComponentId_AUTONOMOUS
#define _kart_controls_ControlComponentId_ARRAYSIZE ((kart_controls_ControlComponentId)(kart_controls_ControlComponentId_AUTONOMOUS+1))

#define _kart_controls_ControlCommandId_MIN kart_controls_ControlCommandId_MODE
#define _kart_controls_ControlCommandId_MAX kart_controls_ControlCommandId_EMERGENCY
#define _kart_controls_ControlCommandId_ARRAYSIZE ((kart_controls_ControlCommandId)(kart_controls_ControlCommandId_EMERGENCY+1))

#define _kart_controls_ControlModeValue_MIN kart_controls_ControlModeValue_MANUAL
#define _kart_controls_ControlModeValue_MAX kart_controls_ControlModeValue_TEST
#define _kart_controls_ControlModeValue_ARRAYSIZE ((kart_controls_ControlModeValue)(kart_controls_ControlModeValue_TEST+1))

#define _kart_controls_ControlCalibrateValue_MIN kart_controls_ControlCalibrateValue_CAL_START
#define _kart_controls_ControlCalibrateValue_MAX kart_controls_ControlCalibrateValue_CAL_RESET
#define _kart_controls_ControlCalibrateValue_ARRAYSIZE ((kart_controls_ControlCalibrateValue)(kart_controls_ControlCalibrateValue_CAL_RESET+1))

#define _kart_controls_ControlEmergencyValue_MIN kart_controls_ControlEmergencyValue_NORMAL
#define _kart_controls_ControlEmergencyValue_MAX kart_controls_ControlEmergencyValue_LIMP_HOME
#define _kart_controls_ControlEmergencyValue_ARRAYSIZE ((kart_controls_ControlEmergencyValue)(kart_controls_ControlEmergencyValue_LIMP_HOME+1))


#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
