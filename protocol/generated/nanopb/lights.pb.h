/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_KART_LIGHTS_LIGHTS_PB_H_INCLUDED
#define PB_KART_LIGHTS_LIGHTS_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Light component IDs */
typedef enum _kart_lights_LightComponentId {
    kart_lights_LightComponentId_FRONT = 0,
    kart_lights_LightComponentId_REAR = 1,
    kart_lights_LightComponentId_INTERIOR = 2,
    kart_lights_LightComponentId_AUXILIARY = 3,
    kart_lights_LightComponentId_UNDERGLOW = 4
} kart_lights_LightComponentId;

/* Light command IDs */
typedef enum _kart_lights_LightCommandId {
    kart_lights_LightCommandId_MODE = 0,
    kart_lights_LightCommandId_SIGNAL = 1, /* turn signals */
    kart_lights_LightCommandId_DURATION = 3,
    kart_lights_LightCommandId_BRAKE = 4
} kart_lights_LightCommandId;

/* Light mode values */
typedef enum _kart_lights_LightModeValue {
    kart_lights_LightModeValue_OFF = 0,
    kart_lights_LightModeValue_ON = 1,
    /* uses sensors to determine if it should be on or off */
    kart_lights_LightModeValue_AUTO = 2,
    kart_lights_LightModeValue_DIM = 3,
    kart_lights_LightModeValue_BRIGHT = 4,
    kart_lights_LightModeValue_HAZARD = 8
} kart_lights_LightModeValue;

typedef enum _kart_lights_LightSignalValue {
    kart_lights_LightSignalValue_NONE = 0,
    kart_lights_LightSignalValue_LEFT = 1,
    kart_lights_LightSignalValue_RIGHT = 2
} kart_lights_LightSignalValue;

#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _kart_lights_LightComponentId_MIN kart_lights_LightComponentId_FRONT
#define _kart_lights_LightComponentId_MAX kart_lights_LightComponentId_UNDERGLOW
#define _kart_lights_LightComponentId_ARRAYSIZE ((kart_lights_LightComponentId)(kart_lights_LightComponentId_UNDERGLOW+1))

#define _kart_lights_LightCommandId_MIN kart_lights_LightCommandId_MODE
#define _kart_lights_LightCommandId_MAX kart_lights_LightCommandId_BRAKE
#define _kart_lights_LightCommandId_ARRAYSIZE ((kart_lights_LightCommandId)(kart_lights_LightCommandId_BRAKE+1))

#define _kart_lights_LightModeValue_MIN kart_lights_LightModeValue_OFF
#define _kart_lights_LightModeValue_MAX kart_lights_LightModeValue_HAZARD
#define _kart_lights_LightModeValue_ARRAYSIZE ((kart_lights_LightModeValue)(kart_lights_LightModeValue_HAZARD+1))

#define _kart_lights_LightSignalValue_MIN kart_lights_LightSignalValue_NONE
#define _kart_lights_LightSignalValue_MAX kart_lights_LightSignalValue_RIGHT
#define _kart_lights_LightSignalValue_ARRAYSIZE ((kart_lights_LightSignalValue)(kart_lights_LightSignalValue_RIGHT+1))


#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
