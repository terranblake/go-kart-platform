/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_KART_COMMON_COMMON_PB_H_INCLUDED
#define PB_KART_COMMON_COMMON_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Message types (2 bits - allows 4 types) */
typedef enum _kart_common_MessageType {
    kart_common_MessageType_COMMAND = 0,
    kart_common_MessageType_STATUS = 1,
    kart_common_MessageType_ACK = 2,
    kart_common_MessageType_ERROR = 3
} kart_common_MessageType;

/* Component types (3 bits - allows 8 types) */
typedef enum _kart_common_ComponentType {
    kart_common_ComponentType_LIGHTS = 0,
    kart_common_ComponentType_MOTORS = 1,
    kart_common_ComponentType_BATTERIES = 2,
    kart_common_ComponentType_CONTROLS = 3,
    kart_common_ComponentType_NAVIGATION = 4 /* Reserved space for 3 more types */
} kart_common_ComponentType;

/* Value types (4 bits - allows 16 types) */
typedef enum _kart_common_ValueType {
    kart_common_ValueType_BOOLEAN = 0,
    kart_common_ValueType_INT8 = 1,
    kart_common_ValueType_UINT8 = 2,
    kart_common_ValueType_INT16 = 3,
    kart_common_ValueType_UINT16 = 4,
    kart_common_ValueType_INT24 = 5,
    kart_common_ValueType_UINT24 = 6 /* FLOAT16 = 7; // Removed - Impractical C++ usage
 Reserved space for 9 more types now */
} kart_common_ValueType;

/* Struct definitions */
/* Main message structure (8 bytes total) */
typedef struct _kart_common_KartMessage {
    /* Byte 0: [2 bits MessageType][3 bits ComponentType][3 bits reserved] */
    kart_common_MessageType message_type; /* 2 bits */
    kart_common_ComponentType component_type; /* 3 bits */
    /* Byte 2: Component ID */
    uint32_t component_id; /* 8 bits (0-255) */
    /* Byte 3: Command/Value ID */
    uint32_t command_id; /* 8 bits (0-255) */
    /* Byte 4: [4 bits ValueType][4 bits reserved] */
    kart_common_ValueType value_type; /* 4 bits */
    /* Bytes 5-7: Value */
    int32_t value; /* 24 bits */
} kart_common_KartMessage;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _kart_common_MessageType_MIN kart_common_MessageType_COMMAND
#define _kart_common_MessageType_MAX kart_common_MessageType_ERROR
#define _kart_common_MessageType_ARRAYSIZE ((kart_common_MessageType)(kart_common_MessageType_ERROR+1))

#define _kart_common_ComponentType_MIN kart_common_ComponentType_LIGHTS
#define _kart_common_ComponentType_MAX kart_common_ComponentType_NAVIGATION
#define _kart_common_ComponentType_ARRAYSIZE ((kart_common_ComponentType)(kart_common_ComponentType_NAVIGATION+1))

#define _kart_common_ValueType_MIN kart_common_ValueType_BOOLEAN
#define _kart_common_ValueType_MAX kart_common_ValueType_UINT24
#define _kart_common_ValueType_ARRAYSIZE ((kart_common_ValueType)(kart_common_ValueType_UINT24+1))

#define kart_common_KartMessage_message_type_ENUMTYPE kart_common_MessageType
#define kart_common_KartMessage_component_type_ENUMTYPE kart_common_ComponentType
#define kart_common_KartMessage_value_type_ENUMTYPE kart_common_ValueType


/* Initializer values for message structs */
#define kart_common_KartMessage_init_default     {_kart_common_MessageType_MIN, _kart_common_ComponentType_MIN, 0, 0, _kart_common_ValueType_MIN, 0}
#define kart_common_KartMessage_init_zero        {_kart_common_MessageType_MIN, _kart_common_ComponentType_MIN, 0, 0, _kart_common_ValueType_MIN, 0}

/* Field tags (for use in manual encoding/decoding) */
#define kart_common_KartMessage_message_type_tag 1
#define kart_common_KartMessage_component_type_tag 2
#define kart_common_KartMessage_component_id_tag 3
#define kart_common_KartMessage_command_id_tag   4
#define kart_common_KartMessage_value_type_tag   5
#define kart_common_KartMessage_value_tag        6

/* Struct field encoding specification for nanopb */
#define kart_common_KartMessage_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    message_type,      1) \
X(a, STATIC,   SINGULAR, UENUM,    component_type,    2) \
X(a, STATIC,   SINGULAR, UINT32,   component_id,      3) \
X(a, STATIC,   SINGULAR, UINT32,   command_id,        4) \
X(a, STATIC,   SINGULAR, UENUM,    value_type,        5) \
X(a, STATIC,   SINGULAR, INT32,    value,             6)
#define kart_common_KartMessage_CALLBACK NULL
#define kart_common_KartMessage_DEFAULT NULL

extern const pb_msgdesc_t kart_common_KartMessage_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define kart_common_KartMessage_fields &kart_common_KartMessage_msg

/* Maximum encoded size of messages (where known) */
#define KART_COMMON_COMMON_PB_H_MAX_SIZE         kart_common_KartMessage_size
#define kart_common_KartMessage_size             29

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
