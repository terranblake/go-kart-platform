syntax = "proto3";

package kart.motors;

// Motor component IDs
enum MotorComponentId {
  MOTOR_LEFT_REAR = 0;      // Main drive motor
  MOTOR_RIGHT_REAR = 1;     // Auxiliary motors
  MOTOR_LEFT_FRONT = 2;     // Steering motor if electric
  MOTOR_RIGHT_FRONT = 3;    // Cooling fan motor
  ALL = 255;                // All motors (broadcast)
}

// Motor command IDs
enum MotorCommandId {
  THROTTLE = 0;                // Speed control (0-100%)
  RPM = 1;                    // RPM reading
  DIRECTION = 2;            // Forward/reverse
  BRAKE = 3;                // Brake control
  MODE = 4;                 // Speed mode (low/mid/high)
  ENABLE = 5;               // Enable/disable motor
  EMERGENCY = 6;            // Emergency commands
  TORQUE = 7;               // Torque control
  CALIBRATE = 8;            // Calibration
  TEMPERATURE = 9;          // Temperature reading/limit
  
  // Sensor readings
  VOLTAGE = 10;
  CURRENT = 11;
  PRESSURE = 12;
}

// Motor direction values
enum MotorDirectionValue {
  FORWARD = 0;              // Forward direction
  REVERSE = 1;              // Reverse direction
  NEUTRAL = 2;              // Neutral (no direction)
}

// Motor brake values
enum MotorBrakeValue {
  BRAKE_OFF = 0;            // Brake off
  BRAKE_ON = 1;            // Brake on
}

// Motor mode values
enum MotorModeValue {
  LOW = 0;                  // Low speed/power mode
  MEDIUM = 1;               // Medium speed/power mode
  HIGH = 2;                 // High speed/power mode
  ECO = 3;                  // Economy mode
  SPORT = 4;                // Sport mode
  CUSTOM = 5;               // Custom mode
  OFF = 6;                  // Off mode
}

// Motor emergency command values
enum MotorEmergencyValue {
  NORMAL = 0;               // Normal operation
  STOP = 1;                 // Emergency stop
  LIMP_HOME = 2;            // Limp home mode (reduced power)
  SHUTDOWN = 3;             // Complete shutdown
}

// Motor calibration values
enum MotorCalibrateValue {
  CAL_START = 0;            // Start calibration
  CAL_STOP = 1;             // Stop calibration
  CAL_RESET = 2;            // Reset to default calibration
}

// Motor status values (bitfield)
enum MotorStatusValue {
  STATUS_OK = 0;            // No issues
  ERROR_OVERCURRENT = 1;    // Overcurrent error
  ERROR_OVERVOLTAGE = 2;    // Overvoltage error
  ERROR_UNDERVOLTAGE = 3;   // Undervoltage error
  ERROR_OVERTEMP = 4;       // Overtemperature error
  ERROR_HALL_SENSOR = 5;   // Hall sensor error
  ERROR_COMMUNICATION = 6; // Communication error
  ERROR_GENERAL = 7;       // General error
  STATUS_UNKNOWN = 8;      // Unknown status
} 